import uuid

from dependency_injector.wiring import Provide, inject

from sarf.vulnerabilities.base import VulnerabilityTemplate
from sarf.shared.crud.simple_crud import SimpleCRUD
from sarf.containers import Container



@inject
def import_templates(
    crud_handler: SimpleCRUD[VulnerabilityTemplate] = Provide[Container.vuln_templates_crud]):

    # Your code goes here
    # Retrieve your templates from your datasource
    templates = ...

    # Map your templates attributes to VulnerabilityTemplate
    # object attributes
    sarf_templates = [
        VulnerabilityTemplate(
            uuid = str(uuid.uuid4()),
            title = vuln["title"],
            cvss = vuln["cvss"],
            references = vuln["ref"],
            description = vuln["desc"],
            impact = "",
            tlp = "WHITE",
            lang = "en",
            author = "{{cookiecutter.author}}"
        ) for vuln in templates
    ]

    # Done. Run your script.

    for template in sarf_templates:
        print(f"Importing {template.title}")
        crud_handler.add(template)
    crud_handler.commit()


def main():
    container = Container()
    container.wire(modules=[__name__])
    import_templates()

if __name__ == "__main__":
    main()
